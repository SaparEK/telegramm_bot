from flask import Flask, request
import telebot
import os
import psycopg2
from telebot import types

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ –±–æ—Ç–∞
app = Flask(__name__)
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
Database = os.getenv("DATABASE_URL")  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LANGUAGE = None
Name = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    conn = psycopg2.connect(Database)
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name VARCHAR(50), phone VARCHAR(50))')
    cur.execute('CREATE TABLE IF NOT EXISTS admins (id SERIAL PRIMARY KEY, chat_id int)')
    conn.commit()
    cur.close()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('ru üá∑üá∫', callback_data='ru')
    btn2 = types.InlineKeyboardButton('en üá¨üáß', callback_data='en')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: call.data in ['ru', 'en'])
def handle_language_selection(call):
    global LANGUAGE
    LANGUAGE = call.data
    bot.send_message(call.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫! ‚úÖ' if LANGUAGE == 'ru' else 'You selected English! ‚úÖ')
    show_main_menu(call.message)

# –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_popular_questions = types.KeyboardButton('–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì' if LANGUAGE == 'ru' else 'Popular Questions ‚ùì')
    btn_contact_operator = types.KeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º üë®‚Äçüíª' if LANGUAGE == 'ru' else 'Contact Operator üë®‚Äçüíª')
    btn_website = types.KeyboardButton('–í–µ–±-—Å–∞–π—Ç üåê' if LANGUAGE == 'ru' else 'Website üåê')
    markup.add(btn_popular_questions, btn_contact_operator, btn_website)

    greeting = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:' if LANGUAGE == 'ru' else 'Choose an action:'
    bot.send_message(message.chat.id, greeting, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(func=lambda message: message.text in ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º üë®‚Äçüíª', 'Contact Operator üë®‚Äçüíª'])
def handle_contact_operator(message):
    bot.send_message(message.chat.id, '–ü—Ä–æ–¥–æ–ª–∂–∞—è –≤—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. ‚úÖ \n\n–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üìù' if LANGUAGE == 'ru' else 'By continuing, you consent to the processing of personal data.‚úÖ \n\nHow should I address you? üìù')
    bot.register_next_step_handler(message, user_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_name(message):
    global Name
    Name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞ üì±:' if LANGUAGE == 'ru' else 'Enter your contact phone number üì±:')
    bot.register_next_step_handler(message, phone)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def phone(message):
    phone = message.text.strip()
    conn = psycopg2.connect(Database)
    bot.send_message(message.chat.id, '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è c –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤! ‚úÖ' if LANGUAGE == 'ru' else 'Your request has been processed! One of our managers will contact you soon! ‚úÖ')
    c = conn.cursor()
    c.execute("INSERT INTO users (name, phone) VALUES (%s, %s)", (Name, phone))
    c.execute("SELECT chat_id FROM admins")
    admins = c.fetchall()
    conn.commit()
    c.close()
    conn.close()

    for admin in admins:
        bot.send_message(admin[0], f'–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç! –ï–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω: {phone} –∏ –∏–º—è {Name}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(func=lambda message: message.text in ['–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì', 'Popular Questions ‚ùì'])
def show_popular_questions(message):
    markup = types.InlineKeyboardMarkup()
    questions = [
        ('–ö–∞–∫–∏–µ –≤–∏–¥—ã –≥—Ä—É–∑–æ–≤ –≤—ã –ø–µ—Ä–µ–≤–æ–∑–∏—Ç–µ?', 'What types of cargo do you transport?'),
        ('–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏?', 'How is the cost of transportation calculated?'),
        ('–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏?', 'What documents are needed for international transportation?'),
        ('–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑?', 'How to track the shipment?'),
        ('–í –∫–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏?', 'Which countries are transported to?'),
        ('–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?', 'How long does the delivery take?'),
        ('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã —É—Å–ª—É–≥–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞?', 'Do you provide cargo insurance services?'),
        ('–ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≥—Ä—É–∑–∞?', 'How is customs clearance organized?')
    ]

    for idx, (ru_text, en_text) in enumerate(questions, start=1):
        question_text = ru_text if LANGUAGE == 'ru' else en_text
        markup.add(types.InlineKeyboardButton(question_text, callback_data=f'question_{idx}'))

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:' if LANGUAGE == 'ru' else 'Choose a question:', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('question_'))
def handle_question_answer(call):
    question_id = int(call.data.split('_')[1])
    answers = [
        ('–õ—é–±—ã–µ –≥—Ä—É–∑—ã (–¢–ù–ü, —Ö–æ–∑—Ç–æ–≤–∞—Ä—ã, –Ω–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–µ –≥—Ä—É–∑—ã).', 'Any cargo (consumer goods, household goods, oversized cargo).'),
        ('–†–∞—Å—á—ë—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –Ω–∞ –∫–∞–∂–¥—ã–π –≥—Ä—É–∑.', 'Calculation is made individually for each cargo.'),
        ('–ò–Ω–≤–æ–π—Å, —É–ø–∞–∫–æ–≤–æ—á–Ω—ã–π –ª–∏—Å—Ç, –¢–¢–ù, –∫–æ–Ω—Ç—Ä–∞–∫—Ç, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –≥—Ä—É–∑, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.', 'Invoice, packing list, waybill, contract, and permits for the cargo, if required.'),
        ('–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.', 'Not tracked.'),
        ('–¢—Ä–∞–Ω–∑–∏—Ç –≤ –ª—é–±—ã–µ —Å—Ç—Ä–∞–Ω—ã.', 'Transit to any countries.'),
        ('–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.', 'Calculated individually.'),
        ('–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞.', 'Upon client request.'),
        ('–¢–∞–º–æ–∂–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –Ω–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è, —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∏—Ç.', 'We do not handle customs clearance, only transit.')
    ]
    answer = answers[question_id - 1][0] if LANGUAGE == 'ru' else answers[question_id - 1][1]
    bot.send_message(call.message.chat.id, answer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_admin
@bot.message_handler(commands=['add_admin'])
def add_admin(message):
    conn = psycopg2.connect(Database)
    c = conn.cursor()
    c.execute("INSERT INTO admins (chat_id) VALUES (%s)", (message.chat.id,))
    conn.commit()
    c.close()
    conn.close()
    bot.send_message(message.chat.id, '–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_admin
@bot.message_handler(commands=['delete_admin'])
def delete_admin(message):
    conn = psycopg2.connect(Database)
    c = conn.cursor()
    c.execute("DELETE FROM admins WHERE chat_id = %s", (message.chat.id,))
    conn.commit()
    c.close()
    conn.close()
    bot.send_message(message.chat.id, '–ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /website
@bot.message_handler(func=lambda message: message.text in ['–í–µ–±-—Å–∞–π—Ç üåê', 'Website üåê'])
def open_website(message):
    url = 'https://ttkz-zbfg.vercel.app/'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:' if LANGUAGE == 'ru' else 'Visit our website using the link below:')
    bot.send_message(message.chat.id, url)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.route("/", methods=["POST"])
def webhook():
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    print("Incoming request:", request.json)

    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        print("Decoded update:", update)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        bot.process_new_updates([update])
    except Exception as e:
        print("Error processing update:", e)
    return "OK", 200

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)